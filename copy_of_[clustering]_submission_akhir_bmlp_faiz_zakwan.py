# -*- coding: utf-8 -*-
"""Copy of [Clustering] Submission Akhir BMLP_FAIZ ZAKWAN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k8wg3lxluLgF_ENLZ11mh-prvKNCgfZA

# **1. Perkenalan Dataset**

Tahap pertama, Anda harus mencari dan menggunakan dataset **tanpa label** dengan ketentuan sebagai berikut:

1. **Sumber Dataset**:  
   Dataset dapat diperoleh dari berbagai sumber, seperti public repositories (*Kaggle*, *UCI ML Repository*, *Open Data*) atau data primer yang Anda kumpulkan sendiri.
   
2. **Ketentuan Dataset**:
   - **Tanpa label**: Dataset tidak boleh memiliki label atau kelas.
   - **Jumlah Baris**: Minimal 1000 baris untuk memastikan dataset cukup besar untuk analisis yang bermakna.
   - **Tipe Data**: Harus mengandung data **kategorikal** dan **numerikal**.
     - *Kategorikal*: Misalnya jenis kelamin, kategori produk.
     - *Numerikal*: Misalnya usia, pendapatan, harga.

3. **Pembatasan**:  
   Dataset yang sudah digunakan dalam latihan clustering (seperti customer segmentation) tidak boleh digunakan.
"""

#Type your code here

"""# **2. Import Library**

Pada tahap ini, Anda perlu mengimpor beberapa pustaka (library) Python yang dibutuhkan untuk analisis data dan pembangunan model machine learning.
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from yellowbrick.cluster import KElbowVisualizer
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import silhouette_score
from sklearn.feature_selection import SelectKBest, f_classif

"""# **3. Memuat Dataset**

Pada tahap ini, Anda perlu memuat dataset ke dalam notebook. Jika dataset dalam format CSV, Anda bisa menggunakan pustaka pandas untuk membacanya. Pastikan untuk mengecek beberapa baris awal dataset untuk memahami strukturnya dan memastikan data telah dimuat dengan benar.

Jika dataset berada di Google Drive, pastikan Anda menghubungkan Google Drive ke Colab terlebih dahulu. Setelah dataset berhasil dimuat, langkah berikutnya adalah memeriksa kesesuaian data dan siap untuk dianalisis lebih lanjut.
"""

df = pd.read_csv('gym_members_exercise_tracking_synthetic_data.csv')

"""# **4. Exploratory Data Analysis (EDA)**

Pada tahap ini, Anda akan melakukan **Exploratory Data Analysis (EDA)** untuk memahami karakteristik dataset. EDA bertujuan untuk:

1. **Memahami Struktur Data**
   - Tinjau jumlah baris dan kolom dalam dataset.  
   - Tinjau jenis data di setiap kolom (numerikal atau kategorikal).

2. **Menangani Data yang Hilang**  
   - Identifikasi dan analisis data yang hilang (*missing values*). Tentukan langkah-langkah yang diperlukan untuk menangani data yang hilang, seperti pengisian atau penghapusan data tersebut.

3. **Analisis Distribusi dan Korelasi**  
   - Analisis distribusi variabel numerik dengan statistik deskriptif dan visualisasi seperti histogram atau boxplot.  
   - Periksa hubungan antara variabel menggunakan matriks korelasi atau scatter plot.

4. **Visualisasi Data**  
   - Buat visualisasi dasar seperti grafik distribusi dan diagram batang untuk variabel kategorikal.  
   - Gunakan heatmap atau pairplot untuk menganalisis korelasi antar variabel.

Tujuan dari EDA adalah untuk memperoleh wawasan awal yang mendalam mengenai data dan menentukan langkah selanjutnya dalam analisis atau pemodelan.
"""

df.info()

df.describe()

df.isnull().sum()

missing_values = df.isnull().sum()
missing_values[missing_values > 0]


less = missing_values[missing_values < 1000].index
over = missing_values[missing_values >= 1000].index

numeric_features = df[less].select_dtypes(include=['number']).columns
df[numeric_features] = df[numeric_features].fillna(df[numeric_features].median())

kategorical_features = df[less].select_dtypes(include=['object']).columns

for column in kategorical_features:
  df[column] = df[column].fillna(df[column].mode()[0])

df = df.drop(columns=over)

missing_values = df.isnull().sum()
missing_values[missing_values > 0]

df.isnull().sum()

for feature in numeric_features:
  plt.figure(figsize=(10, 6))
  sns.boxplot(x=df[feature])
  plt.title(f'Box Plot of {feature}')
  plt.show()

"""# **5. Data Preprocessing**

Pada tahap ini, data preprocessing adalah langkah penting untuk memastikan kualitas data sebelum digunakan dalam model machine learning. Data mentah sering kali mengandung nilai kosong, duplikasi, atau rentang nilai yang tidak konsisten, yang dapat memengaruhi kinerja model. Oleh karena itu, proses ini bertujuan untuk membersihkan dan mempersiapkan data agar analisis berjalan optimal.

Berikut adalah tahapan-tahapan yang bisa dilakukan, tetapi **tidak terbatas** pada:
1. Menghapus atau Menangani Data Kosong (Missing Values)
2. Menghapus Data Duplikat
3. Normalisasi atau Standarisasi Fitur
4. Deteksi dan Penanganan Outlier
5. Encoding Data Kategorikal
6. Binning (Pengelompokan Data)

Cukup sesuaikan dengan karakteristik data yang kamu gunakan yah.
"""

Q1 = df[numeric_features].quantile(0.25)
Q3 = df[numeric_features].quantile(0.75)
IQR = Q3 - Q1

# Filter dataframe untuk hanya menyimpan baris yang tidak mengandung outliers pada kolom numerik
condition = ~((df[numeric_features] < (Q1 - 1.5 * IQR)) | (df[numeric_features] > (Q3 + 1.5 * IQR))).any(axis=1)
df_filtered_numeric = df.loc[condition, numeric_features]
# Menggabungkan kembali dengan kolom kategorikal
categorical_features = df.select_dtypes(include=['object']).columns
df = pd.concat([df_filtered_numeric, df.loc[condition, categorical_features]], axis=1)

for feature in numeric_features:
  plt.figure(figsize=(10, 6))
  sns.boxplot(x=df[feature])
  plt.title(f'Box Plot of {feature}')
  plt.show()

# Standardisasi fitur numerik
scaler = StandardScaler()
df[numeric_features] = scaler.fit_transform(df[numeric_features])

plt.subplot(1, 2, 2)
sns.histplot(df[numeric_features[3]], kde=True)
plt.title("Histogram Setelah Standardisasi")

duplicates = df.duplicated()

print("Baris duplikat:")
print(df[duplicates])

category_features = df.select_dtypes(include=['object']).columns
df[category_features]

from sklearn.preprocessing import LabelEncoder

# Inisialisasi LabelEncoder
label_encoder = LabelEncoder()
df_lencoder = pd.DataFrame(df)

for col in category_features:
  df_lencoder[col] = label_encoder.fit_transform(df[col])

# Menampilkan hasil
df_lencoder

X = df.iloc[:, [9, 10]].values

# Menampilkan data yang diambil dalam format DataFrame dengan nama kolom yang sesuai
print(pd.DataFrame(X, columns=['Workout_Frequency (days/week)', 'Experience_Level']))

"""# **6. Pembangunan Model Clustering**

## **a. Pembangunan Model Clustering**

Pada tahap ini, Anda membangun model clustering dengan memilih algoritma yang sesuai untuk mengelompokkan data berdasarkan kesamaan. Berikut adalah **rekomendasi** tahapannya.
1. Pilih algoritma clustering yang sesuai.
2. Latih model dengan data menggunakan algoritma tersebut.
"""

# Inisialisasi model KMeans tanpa parameter awal
kmeans = KMeans()

# Inisialisasi visualizer KElbow untuk menentukan jumlah cluster optimal
visualizer = KElbowVisualizer(kmeans, k=(1, 10))

# Fit visualizer dengan data untuk menemukan jumlah cluster optimal
visualizer.fit(X)

# Menampilkan grafik elbow untuk analisis
visualizer.show()

kmeans = KMeans(n_clusters=4, random_state=0)
kmeans.fit(X)

# Mendapatkan label cluster
labels = kmeans.labels_

# Mendapatkan jumlah cluster
k = 6

# Fungsi untuk analisis karakteristik cluster
def analyze_clusters(X, labels, k):
  print("Analisis Karakteristik Setiap Cluster:")
  for cluster_id in range(k):
    # Mengambil data untuk cluster saat ini
    cluster_data = X[labels == cluster_id]

    # Menghitung rata-rata untuk setiap fitur dalam cluster
    mean_income = cluster_data[:, 0].mean() # Rata-rata Annual Income
    mean_spending = cluster_data[:, 1].mean() # Rata-rata Spending Score

    print(f"\nCluster {cluster_id + 1}:")
    print(f"Rata-rata Annual Income (k$): {mean_income:.2f}")
    print(f"Rata-rata Spending Score (1-100): {mean_spending:.2f}")

# Analisis karakteristik setiap cluster
analyze_clusters(X, labels, k)

# Inisialisasi dan melatih model KMeans dengan jumlah cluster = 6
kmeans = KMeans(n_clusters=6, random_state=0)
kmeans.fit(X)

# Mendapatkan label cluster
labels = kmeans.labels_

# Mendapatkan jumlah cluster
k = 6

# Fungsi untuk analisis karakteristik cluster
def analyze_clusters(X, labels, k):
  print("Analisis Karakteristik Setiap Cluster:")
  for cluster_id in range(k):
    # Mengambil data untuk cluster saat ini
    cluster_data = X[labels == cluster_id]

    # Menghitung rata-rata untuk setiap fitur dalam cluster
    mean_workout = cluster_data[:, 0].mean() # Rata-rata Workout Frequency
    mean_experience = cluster_data[:, 1].mean() # Rata-rata Experience Level

    print(f"\nCluster {cluster_id + 1}:")
    print(f"Rata-rata Workout Frequency (days/week): {mean_workout:.2f}")
    print(f"Rata-rata Experience Level: {mean_experience:.2f}")

# Analisis karakteristik setiap cluster
analyze_clusters(X, labels, k)

"""## **b. Evaluasi Model Clustering**

Untuk menentukan jumlah cluster yang optimal dalam model clustering, Anda dapat menggunakan metode Elbow atau Silhouette Score.

Metode ini membantu kita menemukan jumlah cluster yang memberikan pemisahan terbaik antar kelompok data, sehingga model yang dibangun dapat lebih efektif. Berikut adalah **rekomendasi** tahapannya.
1. Gunakan Silhouette Score dan Elbow Method untuk menentukan jumlah cluster optimal.
2. Hitung Silhouette Score sebagai ukuran kualitas cluster.
"""

range_n_clusters = [2, 3, 4, 5, 6]

silhouette_scores = []

for n_clusters in range_n_clusters:
    kmeans = KMeans(n_clusters=n_clusters, random_state=0)
    cluster_labels = kmeans.fit_predict(X)
    silhouette_avg = silhouette_score(X, cluster_labels)
    silhouette_scores.append(silhouette_avg)
    print(f"Untuk n_clusters = {n_clusters}, silhouette score adalah {silhouette_avg}")

# Plot Silhouette Score
plt.plot(range_n_clusters, silhouette_scores, marker='o')
plt.xlabel("Jumlah Cluster")
plt.ylabel("Silhouette Score")
plt.title("Silhouette Score untuk Berbagai Jumlah Cluster")
plt.show()

best_silhouette_score = max(silhouette_scores)
best_n_clusters = range_n_clusters[silhouette_scores.index(best_silhouette_score)]

print(f"The best silhouette score is {best_silhouette_score} with {best_n_clusters} clusters.")


kmeans = KMeans(n_clusters=best_n_clusters, random_state=0)
kmeans.fit(X)
labels = kmeans.labels_


analyze_clusters(X, labels, best_n_clusters)

"""## **c. Feature Selection (Opsional)**

Silakan lakukan feature selection jika Anda membutuhkan optimasi model clustering. Jika Anda menerapkan proses ini, silakan lakukan pemodelan dan evaluasi kembali menggunakan kolom-kolom hasil feature selection. Terakhir, bandingkan hasil performa model sebelum dan sesudah menerapkan feature selection.
"""

from sklearn.feature_selection import SelectKBest, f_classif


k = 2
selector = SelectKBest(score_func=f_classif, k=k)
X_new = selector.fit_transform(df_lencoder, labels)

selected_features = df_lencoder.columns[selector.get_support()]

print("Fitur terpilih:", selected_features)


kmeans_new = KMeans(n_clusters=best_n_clusters, random_state=0)
kmeans_new.fit(X_new)
labels_new = kmeans_new.labels_
silhouette_avg_new = silhouette_score(X_new, labels_new)

print(f"Silhouette score setelah feature selection: {silhouette_avg_new}")
print(f"Silhouette score sebelum feature selection: {best_silhouette_score}")
print(f"Perubahan silhouette score: {silhouette_avg_new - best_silhouette_score}")

"""## **d. Visualisasi Hasil Clustering**

Setelah model clustering dilatih dan jumlah cluster optimal ditentukan, langkah selanjutnya adalah menampilkan hasil clustering melalui visualisasi.

Berikut adalah **rekomendasi** tahapannya.
1. Tampilkan hasil clustering dalam bentuk visualisasi, seperti grafik scatter plot atau 2D PCA projection.
"""

import matplotlib.pyplot as plt

# Visualisasi hasil clustering dengan scatter plot
plt.scatter(X[:, 0], X[:, 1], c=labels, s=50, cmap='viridis')
plt.xlabel("Workout_Frequency (days/week)")
plt.ylabel("Experience_Level")
plt.title("Visualisasi Hasil Clustering")
plt.show()

"""## **e. Analisis dan Interpretasi Hasil Cluster**

Setelah melakukan clustering, langkah selanjutnya adalah menganalisis karakteristik dari masing-masing cluster berdasarkan fitur yang tersedia.

Berikut adalah **rekomendasi** tahapannya.
1. Analisis karakteristik tiap cluster berdasarkan fitur yang tersedia (misalnya, distribusi nilai dalam cluster).
2. Berikan interpretasi: Apakah hasil clustering sesuai dengan ekspektasi dan logika bisnis? Apakah ada pola tertentu yang bisa dimanfaatkan?
"""

def analyze_and_interpret_clusters(X, labels, k, features):

    for cluster_id in range(k):
        cluster_data = X[labels == cluster_id]
        print(f"\nCluster {cluster_id + 1}:")

        for i, feature in enumerate(features):
            mean_value = cluster_data[:, i].mean()
            print(f"  - Rata-rata {feature}: {mean_value:.2f}")

        # Add your interpretation here based on the cluster characteristics
        # Example interpretation:
        if cluster_id == 0:
            print("  - Interpretasi: Cluster ini mungkin merepresentasikan pengguna dengan frekuensi olahraga rendah dan pengalaman pemula.")
        elif cluster_id == 1:
            print("  - Interpretasi: Cluster ini mungkin berisi pengguna dengan frekuensi olahraga tinggi dan pengalaman yang mahir.")
        elif cluster_id == 2:
            print("  - Interpretasi: Cluster ini mungkin berisi pengguna dengan frekuensi olahraga sedang dan pengalaman menengah.")
        elif cluster_id == 3:
            print("  - Interpretasi: Cluster ini mungkin berisi pengguna dengan frekuensi olahraga rendah dan pengalaman menengah.")
        elif cluster_id == 4:
            print("  - Interpretasi: Cluster ini mungkin berisi pengguna dengan frekuensi olahraga tinggi dan pengalaman menengah.")
        elif cluster_id == 5:
            print("  - Interpretasi: Cluster ini mungkin berisi pengguna dengan frekuensi olahraga sedang dan pengalaman pemula.")


# Example usage
analyze_and_interpret_clusters(X, labels, best_n_clusters, ['Workout_Frequency (days/week)', 'Experience_Level'])

"""Tulis hasil interpretasinya di sini.
1. Cluster 1:
  -Rata-rata Workout_Frequency (days/week):-0.78
  
  -Rata-rata Experience_Level: 0.22
  
  -Interpretasi: Cluster ini mungkin merepresentasikan pengguna dengan frekuensi olahraga rendah dan pengalaman pemula.
2. Cluster 2:
  -Rata-rata Workout_Frequency (days/week):1.06
  
  -Rata-rata Experience_Level: 0.36
  
  -Interpretasi: Cluster ini mungkin berisi pengguna dengan frekuensi olahraga tinggi dan pengalaman yang mahir.
3. Cluster 3:
  -Rata-rata Workout_Frequency (days/week): -0.35
  
  -Rata-rata Experience_Level: -1.14
  
  -Interpretasi: Cluster ini mungkin berisi pengguna dengan frekuensi olahraga sedang dan pengalaman menengah.
4.
  -Rata-rata Workout_Frequency (days/week): -0.31
  
  -Rata-rata Experience_Level: 1.59
  
  -Interpretasi: Cluster ini mungkin berisi pengguna dengan frekuensi olahraga rendah dan pengalaman menengah.
5.
  -Rata-rata Workout_Frequency (days/week): -0.31

  -Rata-rata Experience_Level: 1.59
  
  -Interpretasi: Cluster ini mungkin berisi pengguna dengan frekuensi olahraga rendah dan pengalaman menengah.
6.
  -Rata-rata Workout_Frequency (days/week): -1.42
  
  -Rata-rata Experience_Level: -1.14
  
  -Interpretasi: Cluster ini mungkin berisi pengguna dengan frekuensi olahraga sedang dan pengalaman pemula.

# **7. Mengeksport Data**

Simpan hasilnya ke dalam file CSV.
"""

from google.colab import files
df.to_csv('clustered_data_gym.csv', encoding = 'utf-8-sig')
files.download('clustered_data_gym.csv')